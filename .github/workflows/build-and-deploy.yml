name: Build services

on:
  push:
    paths:
      - ".github/workflows/**"
      - "database/**"
      - "pkg/**"
      - "internal/**"
      - "cmd/**"

jobs:
  check-test-names:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Detect tests not matching naming pattern
        id: matching
        # https://unix.stackexchange.com/questions/330660/preventing-grep-from-causing-premature-termination-of-bash-e-script
        run: |
          grep -rh 'func Test' --include *_test.go > all_tests.txt
          sed -i 's/func //g' all_tests.txt
          grep -vE '^Test(Unit|IT)_' all_tests.txt > not_matching.txt || [[ $? == 1 ]]
          FAILURES=$(wc -l < not_matching.txt)
          if [[ ${FAILURES} -ne 0 ]]; then
            echo 'failed=true' >> $GITHUB_OUTPUT
          fi
      - name: Fail if some do not match
        if: ${{ steps.matching.outputs.failures == 'true' }}
        # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions#example-setting-an-error-message
        run: |
          echo "::error ::Detected at least one test not matching the naming convention!"
          exit 1

  tests:
    runs-on: ubuntu-latest
    needs: [check-test-names]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.2"
      - name: Run tests with coverage
        run: go test -run='^TestUnit_.*' ./... -coverpkg=./... -race -covermode=atomic -coverprofile=coverage.out
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          file: ./coverage.out
          token: ${{ secrets.CODECOV_TOKEN }}

  it-tests:
    runs-on: ubuntu-latest
    needs: [check-test-names]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.2"
      - name: Install migrate tool
        run: go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
      - name: Setup test database
        run: |
          psql \
            postgresql://postgres@localhost \
            -v user_password=$USER_PASSWORD \
            -f test/db_user_create.sql
          psql \
          postgresql://postgres@localhost \
          -f test/db_create.sql
        working-directory: ./database
        env:
          PGPASSWORD: postgres
          USER_PASSWORD: test_password
      - name: Migrate schema up
        run: |
          migrate \
            -path test/migrations \
            -database postgresql://test_user@localhost/test_db?sslmode=disable \
            up
        working-directory: ./database
        env:
          PGPASSWORD: test_password
      - name: Setup users database
        run: |
          psql \
            postgresql://postgres@localhost \
            -v admin_password=$ADMIN_PASSWORD \
            -v manager_password=$MANAGER_PASSWORD \
            -v user_password=$USER_PASSWORD \
            -f users/db_user_create.sql
          psql \
            postgresql://postgres@localhost \
            -f users/db_create.sql
        working-directory: ./database
        env:
          PGPASSWORD: postgres
          ADMIN_PASSWORD: admin_password
          MANAGER_PASSWORD: manager_password
          USER_PASSWORD: user_password
      - name: Migrate schema up
        run: |
          migrate \
            -path users/migrations \
            -database postgresql://user_service_admin@localhost/db_user_service?sslmode=disable \
            up
        working-directory: ./database
        env:
          PGPASSWORD: admin_password
      - name: Run tests with coverage
        run: go test -run='^TestIT_.*' ./... -coverpkg=./... -race -covermode=atomic -coverprofile=coverage.out
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          file: ./coverage.out
          token: ${{ secrets.CODECOV_TOKEN }}
